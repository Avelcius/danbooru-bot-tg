require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./bot.db', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
  } else {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
  }
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      source TEXT DEFAULT 'danbooru',
      is_subscriber INTEGER DEFAULT 0,
      auto_send_time TEXT DEFAULT NULL,
      auto_send_tags TEXT DEFAULT NULL
    )
  `);
});

const bot = new Telegraf(process.env.BOT_TOKEN);
const ITEMS_PER_PAGE = 10;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const SOURCES = {
  danbooru: {
    name: 'Danbooru',
    url: 'https://danbooru.donmai.us/posts.json',
    params: (tags, page) => ({
      tags: `${tags} rating:g`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data,
    caption: (post) => `Artist: ${post.tag_string_artist || 'Unknown'}`
  },
  e621: {
    name: 'e621',
    url: 'https://e621.net/posts.json',
    params: (tags, page) => ({
      tags: `${tags}`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data.posts,
    caption: (post) => `Artist: ${post.tags.artist?.join(', ') || 'Unknown'}`,
    restricted: true, // for paid subscribers
    headers: {
      'User-Agent': 'YourBot/1.0 (by YourUsername)' // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    }
  },
  e926: {
    name: 'e926',
    url: 'https://e621.net/posts.json',
    params: (tags, page) => ({
      tags: `${tags} rating:safe`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data.posts,
    caption: (post) => `Artist: ${post.tags.artist?.join(', ') || 'Unknown'}`,
    headers: {
      'User-Agent': 'YourBot/1.0 (by YourUsername)' // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    }
  },
  rule34: {
    name: 'Rule34',
    url: 'https://api.rule34.xxx/index.php',
    params: (tags, page) => ({
      page: 'dapi',
      s: 'post',
      q: 'index',
      json: 1,
      tags: tags,
      pid: page,
      limit: ITEMS_PER_PAGE
    }),
    parser: (data) => data,
    caption: (post) => `Artist: ${post.owner || 'Unknown'}\nTags: ${post.tags}`,
    restricted: true
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSettings(userId) {
  return new Promise((resolve, reject) => {
    db.get('SELECT source, is_subscriber, auto_send_time, auto_send_tags FROM users WHERE id = ?', [userId], (err, row) => {
      if (err) reject(err);
      resolve(row || { source: 'danbooru', is_subscriber: 0, auto_send_time: null, auto_send_tags: null });
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserSettings(userId, settings) {
  return new Promise((resolve, reject) => {
    db.run(
      'INSERT OR REPLACE INTO users (id, source, is_subscriber, auto_send_time, auto_send_tags) VALUES (?, ?, ?, ?, ?)',
      [userId, settings.source, settings.is_subscriber, settings.auto_send_time, settings.auto_send_tags],
      (err) => (err ? reject(err) : resolve())
    );
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
async function checkAccess(userId, source) {
  const user = await getUserSettings(userId);
  if (SOURCES[source].restricted && !user.is_subscriber) {
    return false;
  }
  return true;
}

// –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
async function fetchPosts(source, tags, page = 1) {
  try {
    const { url, params, parser, headers } = SOURCES[source];
    const response = await axios.get(url, {
      params: params(tags, page),
      headers: headers || {}
    });
    return {
      results: parser(response.data) || [],
      nextPage: page + 1
    };
  } catch (error) {
    console.error(`[${source}] Error:`, error.message);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const userId = ctx.from.id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  db.run(
    `INSERT OR IGNORE INTO users (id, source, is_subscriber, auto_send_time, auto_send_tags) VALUES (?, 'danbooru', 0, NULL, NULL)`,
    [userId]
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || '–¥—Ä—É–≥'}! üëã\n\n` +
      `–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ç–æ–≤.\n\n` +
      `üìö –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n` +
      `- –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º\n` +
      `- –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n` +
      `- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ç–æ–≤ –≤ –õ–° –∏–ª–∏ –≥—Ä—É–ø–ø—É\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞:`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'open_settings')],
      [Markup.button.callback('‚ú® –ü–æ–¥–ø–∏—Å–∫–∞', 'subscribe')],
      [Markup.button.callback('‚è∞ –¢–∞–π–º–µ—Ä', 'set_timer')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.action('open_settings', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserSettings(userId);

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('Danbooru', 'set_source_danbooru')],
    [Markup.button.callback('e926', 'set_source_e926')],
    [Markup.button.callback('e621 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_source_e621')],
    [Markup.button.callback('Rule34 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_source_rule34')]
  ]);

  ctx.reply(
    `‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${SOURCES[user.source].name}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:`,
    keyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
bot.action('subscribe', async (ctx) => {
  ctx.reply(
    '‚ú® –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä Rule34.\n\n' +
      `–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–∞–π–º–µ—Ä"
bot.action('set_timer', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserSettings(userId);

  ctx.reply(
    `‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00):`
  );

  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
  bot.on('text', async (ctx) => {
    const time = ctx.message.text.trim();
    const [hours, minutes] = time.split(':');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (!/^\d{2}:\d{2}$/.test(time) || isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00).');
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ CRON-—Ñ–æ—Ä–º–∞—Ç
    const cronTime = `${minutes} ${hours} * * *`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUserSettings(userId, {
      ...user,
      auto_send_time: cronTime
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    ctx.reply(
      `‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${time}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:`,
      Markup.inlineKeyboard([
        [Markup.button.callback('Danbooru', 'set_timer_source_danbooru')],
        [Markup.button.callback('e926', 'set_timer_source_e926')],
        [Markup.button.callback('e621 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_timer_source_e621')],
        [Markup.button.callback('Rule34 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_timer_source_rule34')]
      ])
    );
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
bot.action(/set_timer_source_(.+)/, async (ctx) => {
  const userId = ctx.from.id;
  const source = ctx.match[1];
  const user = await getUserSettings(userId);

  if (SOURCES[source].restricted && !user.is_subscriber) {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateUserSettings(userId, {
    ...user,
    source: source
  });

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–≥–∏
  ctx.reply(
    `‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${SOURCES[source].name}\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):`
  );

  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–≥–æ–≤
  bot.on('text', async (ctx) => {
    const tags = ctx.message.text.trim();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUserSettings(userId, {
      ...user,
      auto_send_tags: tags
    });

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    cron.schedule(user.auto_send_time, async () => {
      const data = await fetchPosts(source, tags);
      if (data && data.results.length) {
        const post = data.results[0];
        ctx.telegram.sendPhoto(userId, post.file_url || post.file.url, {
          caption: SOURCES[source].caption(post)
        });
      }
    });

    ctx.reply(
      `‚úÖ –¢–∞–π–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n` +
      `- –í—Ä–µ–º—è: ${user.auto_send_time}\n` +
      `- –ò—Å—Ç–æ—á–Ω–∏–∫: ${SOURCES[source].name}\n` +
      `- –¢–µ–≥–∏: ${tags}`
    );
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');