require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./bot.db', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
  } else {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
  }
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      source TEXT DEFAULT 'danbooru',
      is_subscriber INTEGER DEFAULT 0
    )
  `);
});

const bot = new Telegraf(process.env.BOT_TOKEN);
const ITEMS_PER_PAGE = 10;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const SOURCES = {
  danbooru: {
    name: 'Danbooru',
    url: 'https://danbooru.donmai.us/posts.json',
    params: (tags, page) => ({
      tags: `${tags} rating:g`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data,
    caption: (post) => `Artist: ${post.tag_string_artist || 'Unknown'}`
  },
  e621: {
    name: 'e621',
    url: 'https://e621.net/posts.json',
    params: (tags, page) => ({
      tags: `${tags}`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data.posts,
    caption: (post) => `Artist: ${post.tags.artist?.join(', ') || 'Unknown'}`,
    restricted: true, // for paid subsriber//you can turn false
    headers: {
      'User-Agent': 'YourBot/1.0 (by YourUsername)' // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    }
  },
  e926: {
    name: 'e926',
    url: 'https://e621.net/posts.json',
    params: (tags, page) => ({
      tags: `${tags} rating:safe`,
      limit: ITEMS_PER_PAGE,
      page: page
    }),
    parser: (data) => data.posts,
    caption: (post) => `Artist: ${post.tags.artist?.join(', ') || 'Unknown'}`,
    headers: {
      'User-Agent': 'YourBot/1.0 (by YourUsername)' // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    }
  },
  rule34: {
    name: 'Rule34',
    url: 'https://api.rule34.xxx/index.php',
    params: (tags, page) => ({
      page: 'dapi',
      s: 'post',
      q: 'index',
      json: 1,
      tags: tags,
      pid: page,
      limit: ITEMS_PER_PAGE
    }),
    parser: (data) => data,
    caption: (post) => `Artist: ${post.owner || 'Unknown'}\nTags: ${post.tags}`,
    restricted: true
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSettings(userId) {
  return new Promise((resolve, reject) => {
    db.get('SELECT source, is_subscriber FROM users WHERE id = ?', [userId], (err, row) => {
      if (err) reject(err);
      resolve(row || { source: 'danbooru', is_subscriber: 0 });
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserSettings(userId, source) {
  return new Promise((resolve, reject) => {
    db.run(
      'INSERT OR REPLACE INTO users (id, source) VALUES (?, ?)',
      [userId, source],
      (err) => (err ? reject(err) : resolve())
    );
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
async function checkAccess(userId, source) {
  const user = await getUserSettings(userId);
  if (SOURCES[source].restricted && !user.is_subscriber) {
    return false;
  }
  return true;
}

// –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
async function fetchPosts(source, tags, page = 1) {
  try {
    const { url, params, parser, headers } = SOURCES[source];
    const response = await axios.get(url, {
      params: params(tags, page),
      headers: headers || {}
    });
    return {
      results: parser(response.data) || [],
      nextPage: page + 1
    };
  } catch (error) {
    console.error(`[${source}] Error:`, error.message);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /settings
bot.command('settings', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserSettings(userId);

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('Danbooru', 'set_source_danbooru')],
    [Markup.button.callback('e926', 'set_source_e926')],
    [Markup.button.callback('e621 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_source_e621')],
    [Markup.button.callback('Rule34 (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', 'set_source_rule34')]
  ]);

  ctx.reply(`–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${SOURCES[user.source].name}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:`, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
bot.action(/set_source_(.+)/, async (ctx) => {
  const userId = ctx.from.id;
  const source = ctx.match[1];

  if (SOURCES[source].restricted && !(await checkAccess(userId, source))) {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
  }

  await updateUserSettings(userId, source);
  ctx.reply(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${SOURCES[source].name}`);
});

// –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
bot.on('inline_query', async (ctx) => {
  const userId = ctx.from.id;
  const query = ctx.inlineQuery.query.trim();
  const offset = parseInt(ctx.inlineQuery.offset) || 1;
  const currentPage = offset === 0 ? 1 : offset;

  if (!query) return;

  const user = await getUserSettings(userId);
  const source = user.source;

  if (!(await checkAccess(userId, source))) {
    return ctx.answerInlineQuery([{
      type: 'article',
      id: 'no_access',
      title: '‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
      input_message_content: {
        message_text: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.'
      }
    }]);
  }

  const data = await fetchPosts(source, query, currentPage);
  if (!data || !data.results.length) {
    return ctx.answerInlineQuery([{
      type: 'article',
      id: 'no_results',
      title: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      input_message_content: {
        message_text: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏'
      }
    }]);
  }

  const inlineResults = data.results.map((post, index) => ({
    type: 'photo',
    id: `${source}_${post.id}_${Date.now()}_${index}`,
    photo_url: post.file_url || post.file.url,
    thumb_url: post.preview_url || post.preview?.url || post.file_url,
    caption: SOURCES[source].caption(post)
  }));

  ctx.answerInlineQuery(inlineResults, {
    next_offset: data.nextPage,
    cache_time: 30
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');